###For plotting
import os
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.font_manager as mgr
plt.rcParams['pdf.fonttype'] = 42
homedir = os.path.expanduser("~")
projectdir = os.path.join(homedir, "swift_playground/application_layer")
font_dirs = [os.path.join(projectdir, 'experiments','./latin-modern-roman')]
font_files = mgr.findSystemFonts(fontpaths=font_dirs)
for font_file in font_files:
    mgr.fontManager.addfont(font_file)
#font_list = mgr.createFontList(font_files)
#mgr.fontManager.ttflist.extend(font_list)
plt.rcParams['font.family'] = 'Latin Modern Roman'
fontsize=40
figsize = (15, 8)
width = 0.4

models={
"alexnet":[[0.28535008430480957, 0.27905941009521484, 0.13709282875061035, 0.2180323600769043, 0.21792912483215332, 0.11598372459411621, 0.14222288131713867, 0.14119672775268555, 0.11394119262695312, 0.11521077156066895, 0.10886812210083008, 0.10847949981689453, 0.07234573364257812, 0.07177209854125977, 0.07184195518493652, 0.06614208221435547, 0.06611824035644531, 0.06579780578613281, 0.06478714942932129, 0.06485772132873535, 0.06427884101867676],[1.2517473697662354, 1.2052884101867676, 1.1073904037475586, 0.7690789699554443, 0.752793550491333, 0.688417911529541, 0.5463178157806396, 0.537308931350708, 0.3003864288330078, 0.29395103454589844, 0.13328814506530762, 0.1271195411682129, 0.11453771591186523, 0.10444760322570801, 0.10421013832092285, 0.0377805233001709, 0.0381166934967041, 0.03726816177368164, 0.0073087215423583984, 0.007064104080200195, 0.0029680728912353516]],
"resnet18":[[0.9162521362304688, 0.9073166847229004, 0.9045941829681396, 0.3381938934326172, 0.3130671977996826, 0.28752827644348145, 0.1743638515472412, 0.15973424911499023, 0.09852099418640137, 0.08698916435241699, 0.042601823806762695, 0.04128289222717285, 0.019260883331298828, 0.019135475158691406],[5.467066764831543, 5.0497727394104, 5.039131164550781, 4.514679908752441, 3.725813150405884, 2.9196181297302246, 2.177171230316162, 1.6549506187438965, 1.0918707847595215, 0.664726972579956, 0.3375675678253174, 0.013196706771850586, 0.007880210876464844, 0.007226467132568359]],
"vgg11":[[3.468742847442627, 3.4697043895721436, 1.233473539352417, 1.892033576965332, 1.8836219310760498, 0.7628579139709473, 1.0972812175750732, 1.0969219207763672, 1.0318171977996826, 1.0299794673919678, 0.4670226573944092, 0.6271429061889648, 0.6240277290344238, 0.5631728172302246, 0.5662415027618408, 0.27527403831481934, 0.2626533508300781, 0.2602701187133789, 0.23981428146362305, 0.23969554901123047, 0.16119694709777832, 0.16045641899108887, 0.138824462890625, 0.13878512382507324, 0.13792991638183594, 0.13641953468322754, 0.13550114631652832, 0.13541364669799805, 0.13287758827209473],[15.404210329055786, 15.010758876800537, 13.633462190628052, 11.667534589767456, 11.48586916923523, 10.796530485153198, 9.263695478439331, 9.167786598205566, 6.242594957351685, 6.139381408691406, 5.795299530029297, 4.455191135406494, 4.408347129821777, 1.8335039615631104, 1.7871997356414795, 1.6090171337127686, 0.9460558891296387, 0.9339194297790527, 0.27288055419921875, 0.2601652145385742, 0.22475028038024902, 0.21395182609558105, 0.03798246383666992, 0.04066920280456543, 0.0422818660736084, 0.012154579162597656, 0.012054443359375, 0.011478662490844727, 0.0058135986328125]],
"densenet121":[[1.394432783126831, 1.3902390003204346, 1.3877394199371338, 0.9066388607025146, 1.1757919788360596, 1.1678361892700195, 1.1647295951843262, 0.7769291400909424, 0.5890109539031982, 0.6205775737762451, 0.6143181324005127, 0.6127746105194092, 0.41064977645874023, 0.27280235290527344, 0.2833554744720459, 0.28158020973205566, 0.28240394592285156, 0.18787097930908203, 0.11522698402404785, 0.10940051078796387, 0.10881233215332031, 0.08426976203918457],[21.52331256866455, 20.776274919509888, 20.669387102127075, 19.56398582458496, 12.984174966812134, 12.694957971572876, 12.580151557922363, 11.98410177230835, 11.651114463806152, 6.192911863327026, 6.025771856307983, 5.937759637832642, 5.631371259689331, 5.178467035293579, 0.8843393325805664, 0.8310620784759521, 0.995307445526123, 0.7196393013000488, 0.629633903503418, 0.09801888465881348, 0.09572505950927734, 0.0707559585571289]]}
models_split = [np.arange(1,22),np.arange(1,15),np.arange(1,30),np.arange(1,23)]

for (model,values), split_idxs in zip(models.items(), models_split):
  ##Plotting results
  fig = plt.figure(figsize=figsize)
  figs = []
  ind = np.arange(len(split_idxs))
  fig = plt.bar(ind-0.5*width, values[1], width, linewidth=1, label="CPU",hatch="/",edgecolor='black')
  figs.append(fig)
  fig = plt.bar(ind+0.5*width, values[0], width, linewidth=1, label="GPU",hatch="\\",edgecolor='black')
  figs.append(fig)
  plt.ylabel("Time (sec.)", fontsize=fontsize)
  plt.xlabel('Layer Index', fontsize=fontsize)
  plt.yticks(fontsize=fontsize)
  plt.xticks(ind, split_idxs, fontsize=fontsize)
  plt.legend(handles=figs, fontsize=fontsize, loc="upper right")
  plt.tight_layout()
  plt.savefig('observation_all_layers_{}.pdf'.format(model))
#Plotting GPU memory utilization
import json
model_to_mems = json.load(open("gpu_mem_log"))
batch_sizes = [50,100,200]
for (model, gpu_mems), split_idxs in zip(model_to_mems.items(), models_split):
  ind = np.arange(len(split_idxs))
  fig = plt.figure(figsize=figsize)
  figs = []
  fig = plt.bar(ind - width, gpu_mems[:len(ind)], width, linewidth=1, label="Batch = {}".format(batch_sizes[0]),edgecolor='black')
  figs.append(fig)
  fig2 = plt.bar(ind, gpu_mems[len(ind):2*len(ind)], width, linewidth=1, label="Batch = {}".format(batch_sizes[1]),edgecolor='black')
  figs.append(fig2)
  fig3 = plt.bar(ind + width, gpu_mems[2*len(ind):], width, linewidth=1, label="Batch = {}".format(batch_sizes[2]),edgecolor='black')
  figs.append(fig3)
  plt.ylabel("GPU memory (GBs)", fontsize=fontsize)
  plt.xlabel('Start layer index', fontsize=fontsize)
  plt.yticks(fontsize=fontsize)
  plt.xticks(ind, split_idxs, fontsize=fontsize)
  plt.legend(handles=figs, fontsize=fontsize, loc="upper right")
  plt.tight_layout()
  plt.savefig('observation_gpu_mem_per_layer_{}.pdf'.format(model))
