###For plotting
import os
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.font_manager as mgr
plt.rcParams['pdf.fonttype'] = 42
homedir = os.path.expanduser("~")
projectdir = os.path.join(homedir, "swift_playground/application_layer")
font_dirs = [os.path.join(projectdir, 'experiments','./latin-modern-roman')]
font_files = mgr.findSystemFonts(fontpaths=font_dirs)
for font_file in font_files:
    mgr.fontManager.addfont(font_file)
#font_list = mgr.createFontList(font_files)
#mgr.fontManager.ttflist.extend(font_list)
plt.rcParams['font.family'] = 'Latin Modern Roman'
fontsize=40
figsize = (15, 8)
width = 0.4

models={
"alexnet":[[0.28535008430480957, 0.27905941009521484, 0.13709282875061035, 0.2180323600769043, 0.21792912483215332, 0.11598372459411621, 0.14222288131713867, 0.14119672775268555, 0.11394119262695312, 0.11521077156066895, 0.10886812210083008, 0.10847949981689453, 0.07234573364257812, 0.07177209854125977, 0.07184195518493652, 0.06614208221435547, 0.06611824035644531, 0.06579780578613281, 0.06478714942932129, 0.06485772132873535, 0.06427884101867676],[1.2517473697662354, 1.2052884101867676, 1.1073904037475586, 0.7690789699554443, 0.752793550491333, 0.688417911529541, 0.5463178157806396, 0.537308931350708, 0.3003864288330078, 0.29395103454589844, 0.13328814506530762, 0.1271195411682129, 0.11453771591186523, 0.10444760322570801, 0.10421013832092285, 0.0377805233001709, 0.0381166934967041, 0.03726816177368164, 0.0073087215423583984, 0.007064104080200195, 0.0029680728912353516]],
"resnet18":[[0.9162521362304688, 0.9073166847229004, 0.9045941829681396, 0.3381938934326172, 0.3130671977996826, 0.28752827644348145, 0.1743638515472412, 0.15973424911499023, 0.09852099418640137, 0.08698916435241699, 0.042601823806762695, 0.04128289222717285, 0.019260883331298828, 0.019135475158691406],[5.467066764831543, 5.0497727394104, 5.039131164550781, 4.514679908752441, 3.725813150405884, 2.9196181297302246, 2.177171230316162, 1.6549506187438965, 1.0918707847595215, 0.664726972579956, 0.3375675678253174, 0.013196706771850586, 0.007880210876464844, 0.007226467132568359]],
"vgg11":[[3.468742847442627, 3.4697043895721436, 1.233473539352417, 1.892033576965332, 1.8836219310760498, 0.7628579139709473, 1.0972812175750732, 1.0969219207763672, 1.0318171977996826, 1.0299794673919678, 0.4670226573944092, 0.6271429061889648, 0.6240277290344238, 0.5631728172302246, 0.5662415027618408, 0.27527403831481934, 0.2626533508300781, 0.2602701187133789, 0.23981428146362305, 0.23969554901123047, 0.16119694709777832, 0.16045641899108887, 0.138824462890625, 0.13878512382507324, 0.13792991638183594, 0.13641953468322754, 0.13550114631652832, 0.13541364669799805, 0.13287758827209473],[15.404210329055786, 15.010758876800537, 13.633462190628052, 11.667534589767456, 11.48586916923523, 10.796530485153198, 9.263695478439331, 9.167786598205566, 6.242594957351685, 6.139381408691406, 5.795299530029297, 4.455191135406494, 4.408347129821777, 1.8335039615631104, 1.7871997356414795, 1.6090171337127686, 0.9460558891296387, 0.9339194297790527, 0.27288055419921875, 0.2601652145385742, 0.22475028038024902, 0.21395182609558105, 0.03798246383666992, 0.04066920280456543, 0.0422818660736084, 0.012154579162597656, 0.012054443359375, 0.011478662490844727, 0.0058135986328125]],
"densenet121":[[1.394432783126831, 1.3902390003204346, 1.3877394199371338, 0.9066388607025146, 1.1757919788360596, 1.1678361892700195, 1.1647295951843262, 0.7769291400909424, 0.5890109539031982, 0.6205775737762451, 0.6143181324005127, 0.6127746105194092, 0.41064977645874023, 0.27280235290527344, 0.2833554744720459, 0.28158020973205566, 0.28240394592285156, 0.18787097930908203, 0.11522698402404785, 0.10940051078796387, 0.10881233215332031, 0.08426976203918457],[21.52331256866455, 20.776274919509888, 20.669387102127075, 19.56398582458496, 12.984174966812134, 12.694957971572876, 12.580151557922363, 11.98410177230835, 11.651114463806152, 6.192911863327026, 6.025771856307983, 5.937759637832642, 5.631371259689331, 5.178467035293579, 0.8843393325805664, 0.8310620784759521, 0.995307445526123, 0.7196393013000488, 0.629633903503418, 0.09801888465881348, 0.09572505950927734, 0.0707559585571289]]}
#Another run
#models = {
#"alexnet":[[0.1781296730041504, 0.17257380485534668, 0.06763029098510742, 0.12609076499938965, 0.12586116790771484, 0.05007815361022949, 0.06713414192199707, 0.06682848930358887, 0.04548311233520508, 0.04532814025878906, 0.03971219062805176, 0.03945112228393555, 0.012430429458618164, 0.011945724487304688, 0.012226104736328125, 0.006937265396118164, 0.0063893795013427734, 0.0063745975494384766, 0.005370140075683594, 0.0052945613861083984, 0.004094600677490234],[1.6909675598144531, 1.3291544914245605, 1.314298391342163, 1.1664130687713623, 1.1495170593261719, 1.123534917831421, 1.0922069549560547, 1.0506446361541748, 0.9799048900604248, 0.9774646759033203, 0.9311904907226562, 0.9234426021575928, 0.9168558120727539, 0.9178555011749268, 0.910219669342041, 0.8916568756103516, 0.8932886123657227, 0.887507438659668, 0.8818631172180176, 0.8862786293029785, 0.8715806007385254]],
#"resnet18": [[0.7143898010253906, 0.7031543254852295, 0.6993536949157715, 0.2779574394226074, 0.25314879417419434, 0.22621822357177734, 0.13758015632629395, 0.12364411354064941, 0.07625985145568848, 0.0634002685546875, 0.024075984954833984, 0.02335381507873535, 0.007451772689819336, 0.007353782653808594],[5.611059904098511, 5.381944894790649, 5.402574062347412, 5.19680643081665, 4.901683568954468, 4.661395072937012, 4.389430046081543, 4.2206809520721436, 3.941185474395752, 3.8959269523620605, 3.8098433017730713, 3.6938202381134033, 3.6940572261810303, 3.6896235942840576]],
#"vgg11": [[2.6032140254974365, 2.5921759605407715, 0.9082412719726562, 1.3894193172454834, 1.383573055267334, 0.5467288494110107, 0.7865581512451172, 0.7775495052337646, 0.7137458324432373, 0.7091317176818848, 0.29006075859069824, 0.3979954719543457, 0.4006533622741699, 0.3455085754394531, 0.3361189365386963, 0.13029766082763672, 0.11178803443908691, 0.11175346374511719, 0.09430098533630371, 0.09342193603515625, 0.03272724151611328, 0.03137826919555664, 0.010077953338623047, 0.009926557540893555, 0.009823799133300781, 0.008674860000610352, 0.008919715881347656, 0.008321523666381836, 0.006802797317504883], [16.213334798812866, 16.171867847442627, 15.723377466201782, 15.006235837936401, 14.838502645492554, 14.80035138130188, 14.161321878433228, 14.102866649627686, 13.181580305099487, 13.153193950653076, 12.988789796829224, 12.532143592834473, 12.589296817779541, 11.63047981262207, 11.569730997085571, 11.516010999679565, 11.25655722618103, 11.16637921333313, 11.006381034851074, 10.966815948486328, 11.06945252418518, 10.929118156433105, 10.83342981338501, 10.95149540901184, 10.938498973846436, 10.740068912506104, 10.743408203125, 11.128501653671265, 10.91072964668274]],
#"densenet121": [[1.179253101348877, 1.1712017059326172, 1.166105031967163, 0.7439706325531006, 0.9547257423400879, 0.9475672245025635, 0.9440686702728271, 0.6566567420959473, 0.44332432746887207, 0.4933896064758301, 0.4901258945465088, 0.4880259037017822, 0.3394150733947754, 0.21582245826721191, 0.21128201484680176, 0.21047425270080566, 0.21125078201293945, 0.1408097743988037, 0.08101701736450195, 0.07632613182067871, 0.0759122371673584, 0.060124874114990234], [22.0057270526886, 21.08040452003479, 21.33765149116516, 20.301130294799805, 18.526079654693604, 18.684024572372437, 18.694150686264038, 18.2404887676239, 18.156792402267456, 16.375370979309082, 16.294636487960815, 16.391406297683716, 16.211549282073975, 16.262938499450684, 14.648376941680908, 14.698512077331543, 14.843209981918335, 14.808970928192139, 14.673984050750732, 14.334356307983398, 14.336762428283691, 14.267509698867798]]}
models_split = [np.arange(1,22),np.arange(1,15),np.arange(1,30),np.arange(1,23)]

for (model,values), split_idxs in zip(models.items(), models_split):
  ##Plotting results
  fig = plt.figure(figsize=figsize)
  figs = []
  ind = np.arange(len(split_idxs))
  #The following lines to create per-layer execution time estimate
  times = values[1]
  for i in range(1,len(times)):
    times[i-1] = abs(times[i]-times[i-1])
  times[len(times)-1] = times[len(times)-2]
  fig = plt.bar(ind-0.5*width, times, width, linewidth=1, label="CPU",hatch="/",edgecolor='black', color='blue')
  figs.append(fig)
  times = values[0]
  for i in range(1,len(times)):
    times[i-1] = abs(times[i]-times[i-1])
  times[len(times)-1] = times[len(times)-2]
  fig = plt.bar(ind+0.5*width, times, width, linewidth=1, label="GPU",hatch="\\",edgecolor='black', color='orange')
  figs.append(fig)
  plt.ylabel("Execution Time (sec.)", fontsize=fontsize)
  plt.xlabel('Layer index', fontsize=fontsize)
  plt.yticks(fontsize=fontsize)
  plt.xticks(ind, split_idxs, fontsize=25)
  plt.legend(handles=figs, fontsize=fontsize, loc="upper right")
  plt.tight_layout()
  plt.savefig('observation_all_layers_{}.pdf'.format(model))
#Plotting GPU memory utilization
import json
model_to_mems = json.load(open("gpu_mem_log"))
batch_sizes = [50,100,200]
width=0.3
for (model, gpu_mems), split_idxs in zip(model_to_mems.items(), models_split):
  ind = np.arange(len(split_idxs)+1)
  fig = plt.figure(figsize=figsize)
  figs = []
  gpu = gpu_mems[:len(ind)]
#  for i in range(1,len(gpu)-1):
#    gpu[i-1] = abs(gpu[i]-gpu[i-1])
#  gpu[len(gpu)-2] = gpu[len(gpu)-3]
  print(f"Length of ind: {len(ind)}, length of gpu: {len(gpu)}")
  fig = plt.bar(ind - width, gpu, width, linewidth=1, label="Batch = {}".format(batch_sizes[0]), hatch="/", edgecolor='black', color='blue')
  figs.append(fig)
  gpu = gpu_mems[len(ind):2*len(ind)]
#  for i in range(1,len(gpu)-1):
#    gpu[i-1] = abs(gpu[i]-gpu[i-1])
#  gpu[len(gpu)-2] = gpu[len(gpu)-3]
  fig2 = plt.bar(ind, gpu, width, linewidth=1, label="Batch = {}".format(batch_sizes[1]), hatch="\\",edgecolor='black', color='orange')
  figs.append(fig2)
  gpu = gpu_mems[2*len(ind):]
#  for i in range(1,len(gpu)-1):
#    gpu[i-1] = abs(gpu[i]-gpu[i-1])
#  gpu[len(gpu)-2] = gpu[len(gpu)-3]
  fig3 = plt.bar(ind + width, gpu, width, linewidth=1, label="Batch = {}".format(batch_sizes[2]), hatch="x",edgecolor='black', color='green')
  figs.append(fig3)
  plt.ylabel("GPU Memory (GBs)", fontsize=fontsize)
  plt.xlabel('Layer index', fontsize=fontsize)
  plt.yticks(fontsize=fontsize)
  split_idxs = list(split_idxs)
  split_idxs.append("Backward")
  plt.xticks(ind, split_idxs, fontsize=25)
  ax = plt.gca()
  tick = ax.get_xticklabels()[-1]
  tick.set_rotation(30)
  plt.legend(handles=figs, fontsize=fontsize, loc="upper right")
  plt.tight_layout()
  plt.savefig('observation_gpu_mem_per_layer_{}.pdf'.format(model))
